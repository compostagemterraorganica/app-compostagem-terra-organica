import * as Updates from 'expo-updates';

class UpdateService {
  constructor() {
    this.isCheckingForUpdates = false;
  }

  /**
   * Inicializa o servi√ßo de atualiza√ß√µes Expo Updates
   */
  async initialize() {
    try {
      console.log('üîÑ Inicializando Expo Updates...');
      
      // Verificar atualiza√ß√µes na inicializa√ß√£o
      await this.checkForUpdates();
      
      console.log('‚úÖ Expo Updates inicializado');
    } catch (error) {
      console.error('‚ùå Erro ao inicializar Expo Updates:', error);
    }
  }

  /**
   * Verifica se h√° atualiza√ß√µes dispon√≠veis via Expo Updates
   */
  async checkForUpdates() {
    if (this.isCheckingForUpdates) {
      return;
    }

    try {
      this.isCheckingForUpdates = true;
      console.log('üîç Verificando atualiza√ß√µes Expo Updates...');

      const update = await Updates.checkForUpdateAsync();
      
      if (update.isAvailable) {
        console.log('üÜï Nova atualiza√ß√£o Expo Updates dispon√≠vel - aplicando automaticamente...');
        await this.performUpdate(update);
      } else {
        console.log('‚úÖ App est√° atualizado via Expo Updates');
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar atualiza√ß√µes Expo Updates:', error);
    } finally {
      this.isCheckingForUpdates = false;
    }
  }


  /**
   * Executa a atualiza√ß√£o via Expo Updates
   */
  async performUpdate(update) {
    try {
      console.log('üîÑ Iniciando atualiza√ß√£o Expo Updates...');
      
      await Updates.fetchUpdateAsync();
      await Updates.reloadAsync();
      
      console.log('‚úÖ Atualiza√ß√£o Expo Updates instalada com sucesso');
    } catch (error) {
      console.error('‚ùå Erro durante atualiza√ß√£o Expo Updates:', error);
      // Removido o Alert - atualiza√ß√£o falha silenciosamente
    }
  }

  /**
   * For√ßa verifica√ß√£o de atualiza√ß√µes
   */
  async forceCheckForUpdates() {
    console.log('üîÑ Verifica√ß√£o for√ßada de atualiza√ß√µes Expo Updates...');
    await this.checkForUpdates();
  }

  /**
   * Obt√©m informa√ß√µes da atualiza√ß√£o atual
   */
  async getCurrentUpdateInfo() {
    try {
      const update = await Updates.getUpdateMetadataAsync();
      return update;
    } catch (error) {
      console.error('‚ùå Erro ao obter informa√ß√µes da atualiza√ß√£o:', error);
      return null;
    }
  }

  /**
   * Destr√≥i o servi√ßo
   */
  destroy() {
    console.log('üóëÔ∏è Servi√ßo Expo Updates destru√≠do');
  }
}

// Inst√¢ncia singleton
const updateService = new UpdateService();

export default updateService;